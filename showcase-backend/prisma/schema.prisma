// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  // output             = "../src/prisma/generated/type-graphql"
  // emitTranspiledCode = false
}

// TODO:
// what datatype to use for String (postgres detault text) @db.<type>
// ids: auto increment ID vs uidd vs cuid
// use cuid to better support  support horizontal scaling and sequential lookup performance.
// uidd for User badgeType and badgeItem
// add indexes with @@index

enum Currency {
  USD
  EUR
  GBP
}

enum UserType {
  basic
  creator
}

model SmsVerification {
  phone                     String   @id
  user                      User?
  code                      String
  codesSent                 Int
  codesSentSinceValid       Int
  attemptsEntered           Int
  attemptsEnteredSinceValid Int
  valid                     Boolean
  expiration                DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id String @id @default(uuid())

  authId String @unique

  phone           String?          @unique
  smsVerification SmsVerification? @relation(fields: [phone], references: [phone])

  userType    UserType @default(basic)
  kycVerified Boolean  @default(false) // todo: maybe this should be a userType aswell?
  isBanned    Boolean  @default(false)

  profile Profile?

  badgeTypesCreated   BadgeType[] @relation("badgeTypesCreated")
  badgeTypesForResell BadgeType[] @relation("badgeTypesForResell")

  badgeItemsOwned          BadgeItem[] @relation("badgeCurrentlyOwned")
  badgeItemsOriginatedFrom BadgeItem[] @relation("badgeOriginatedFrom")

  cryptoWallet Crypto?
  stripeInfo   Stripe?
  balance      Balance?
  transferwise Transferwise?
  withdrawals  Withdrawal[]

  buyReceipts  Receipt[] @relation("buyReceipts")
  sellReceipts Receipt[] @relation("sellReceipts")

  badgeItemLikes BadgeItemLike[]
  badgeTypeLikes BadgeTypeLike[]

  badgeItemViews BadgeItemView[]
  badgeTypeViews BadgeTypeView[]

  notifications        Notification[]
  notificationToken    String?
  NotificationSettings NotificationSettings[]

  friends   Follow[] @relation("friends")
  followers Follow[] @relation("followers")

  chats            ChatParticipant[]
  sentChatMessages ChatMessage[]     @relation("sentMessages")
  chatMessageReads ChatMessageRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// todo: is it neccesary to have separete id here? ðŸ‘‰ create profile with user.id
model Profile {
  id   String @id
  user User   @relation(fields: [id], references: [id])

  displayName String
  username    String  @unique
  bio         String?
  email       String? @unique

  currency  Currency  @default(USD)
  birthDate DateTime?
  avatar    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Category {
  causes
  art
  music
  gaming
  style
  sports
  animals
  podcasts
  vlogs
  travel
  culinary
  technology
}

model BadgeType {
  id        String @id
  creator   User   @relation(name: "badgeTypesCreated", fields: [creatorId], references: [id])
  creatorId String

  resaller   User?   @relation(name: "badgeTypesForResell", fields: [resallerId], references: [id])
  resallerId String?

  tokenTypeId String @unique
  uri         String @unique

  supply   Int
  price    Float
  currency Currency @default(USD)
  sold     Int      @default(0)

  image     String
  imageHash String

  causeId        Int?
  cause          Cause? @relation(fields: [causeId], references: [id])
  donationAmount Float? @default(0)

  title       String
  description String?
  category    Category @default(art)

  shares Int @default(0)

  soldout             Boolean     @default(false)
  resale              Boolean     @default(false)
  removedFromShowcase Boolean     @default(false) //todo: set this to true when all badgeItems all badges get removed
  gif                 Boolean     @default(false)
  badgeItems          BadgeItem[]
  receipts            Receipt[]

  likes BadgeTypeLike[]
  views BadgeTypeView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BadgeItem {
  id String @id @default(uuid())

  tokenId String // todo: is this uniqiue? if it changes after re-sell then yes

  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])
  badgeTypeId String

  creator   User   @relation(name: "badgeOriginatedFrom", fields: [creatorId], references: [id])
  creatorId String

  owner   User   @relation(name: "badgeCurrentlyOwned", fields: [ownerId], references: [id])
  ownerId String

  receipt Receipt?

  edition      Int
  purchaseDate DateTime

  shares Int @default(0)

  removedFromShowcase Boolean @default(false)
  forSale             Boolean @default(false)

  likes BadgeItemLike[]
  views BadgeItemView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cause {
  id                    Int         @id @default(autoincrement())
  balanceEUR            Float       @default(0)
  balanceGBP            Float       @default(0)
  balanceUSD            Float       @default(0)
  numberOfContributions Int         @default(0)
  image                 String
  name                  String
  site                  String
  badgeTypes            BadgeType[]
  receipts              Receipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Crypto {
  id                  String @id
  owner               User   @relation(fields: [id], references: [id])
  address             String
  encryptedMnemonic   String
  encryptedPrivateKey String
  ivMnemonic          String
  ivPrivateKey        String
  passwordHint        String
  publicKey           String
}

// todo: use this table once requesting info from receipts cost too much resources
model Balance {
  id    String @id
  owner User   @relation(fields: [id], references: [id])

  EUR                          Float @default(0)
  GBP                          Float @default(0)
  USD                          Float @default(0)
  totalSpentAmountConvertedUsd Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CurrencyRate {
  id Int @id @default(autoincrement())

  EUR Float
  GBP Float
  USD Float @default(1)

  createdAt DateTime @default(now())
}

model Receipt {
  id Int @id @default(autoincrement())

  recipient   User   @relation(name: "buyReceipts", fields: [recipientId], references: [id])
  recipientId String

  // todo: not neccesary to store this here
  creator   User   @relation(name: "sellReceipts", fields: [creatorId], references: [id])
  creatorId String

  badgeItem   BadgeItem @relation(fields: [badgeItemId], references: [id])
  badgeItemId String

  // todo: not neccesary to store this here
  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])
  badgeTypeId String

  stripeChargeId String

  convertedPrice    Float
  convertedRate     Float
  convertedCurrency Currency

  cause   Cause? @relation(fields: [causeId], references: [id])
  causeId Int?

  transactionHash String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// todo: is it possible to add multiple bank card to an account?
model Stripe {
  id    String @id
  owner User   @relation(fields: [id], references: [id])

  stripeId          String @unique // todo: should stripeId be unique here? 
  lastFourCardDigit String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Transferwise {
  id    String @id
  owner User   @relation(fields: [id], references: [id])

  idUSD            String?
  accountNumberUSD String?
  idGBP            String?
  accountNumberGBP String?
  idEUR            String?
  accountNumberEUR String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Withdrawal {
  id                    Int       @id @default(autoincrement())
  ownerId               String
  owner                 User      @relation(fields: [ownerId], references: [id])
  customerTransactionId String
  transactionId         String?
  quote                 String
  targetAccount         String
  amount                Float
  currency              Currency
  success               Boolean?
  error                 String?
  eta                   DateTime?
  createdAt             DateTime  @default(now())

}

model BadgeItemLike {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeItemId String
  badgeItem   BadgeItem @relation(fields: [badgeItemId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeItemId])
}

model BadgeTypeLike {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeTypeId String
  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeTypeId])
}

model BadgeItemView {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeItemId String
  badgeItem   BadgeItem @relation(fields: [badgeItemId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeItemId])
}

model BadgeTypeView {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeTypeId String
  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeTypeId])
}

// todo: are these statuses enough?
enum FollowStatus {
  // Pending
  Accepted
  // Declined
  Unfollowed
}

model Follow {
  userId     String
  user       User         @relation(name: "followers", fields: [userId], references: [id])
  followerId String
  follower   User         @relation(name: "friends", fields: [followerId], references: [id])
  status     FollowStatus
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt

  @@id([userId, followerId])
}

enum NotificationType {
  NEW_BADGE_PUBLISHED
  NEW_FOLLOWER_ADDED
  NEW_MESSAGE_RECEIVED
  SOLD_BADGES_SUMMARY
  MOST_VIEWED_BADGE
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  recicpient  User             @relation(fields: [recipientId], references: [id])
  type        NotificationType
  title       String
  message     String
  readAt      DateTime?
  createdAt   DateTime         @default(now())
}

model NotificationSettings {
  id   String 
  user User   @relation(fields: [id], references: [id])

  type NotificationType

  allowEmailSending Boolean @default(false)
  allowSmsSending   Boolean @default(false)
  allowPushSending  Boolean @default(false)

  @@id([id, type])
}

enum ExpoStatus {
  ok
  error
}

enum ExpoError {
  DeviceNotRegistered
  InvalidCredentials
  MessageTooBig
  MessageRateExceeded
}

enum ExpoType {
  ticket
  receipt
}

model ExpoAdmin {
  id      Int        @id @default(autoincrement())
  type    ExpoType
  status  ExpoStatus
  expoId  String?
  message String?
  error   ExpoError?
}

// todo: decide where to store messages / how to implement chat
model Chat {
  id           String            @id @default(uuid())
  participants ChatParticipant[]
  messages     ChatMessage[]

  archivedAt DateTime?
  createdAt  DateTime  @default(now())
}

// todo: should we add a chatname attr?
model ChatParticipant {
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@id([chatId, userId])
}

model ChatMessage {
  id      String @id @default(uuid())
  fromId  String
  from    User   @relation(name: "sentMessages", fields: [fromId], references: [id])
  chatId  String
  chat    Chat   @relation(fields: [chatId], references: [id])
  message String

  reads ChatMessageRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ChatMessageRead {
  id Int @id @default(autoincrement())

  messageId String
  message   ChatMessage @relation(fields: [messageId], references: [id])

  readById String
  readBy   User   @relation(fields: [readById], references: [id])

  createdAt DateTime @default(now())
}
