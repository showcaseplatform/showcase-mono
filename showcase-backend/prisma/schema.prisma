// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  // output             = "../src/prisma/generated/type-graphql"
  // emitTranspiledCode = false
}

enum Currency {
  USD
  EUR
  GBP
}

// todo: is it neccesary to have separete id here?
model Profile {
  id          String    @id @default(uuid())
  displayName String
  username    String
  bio         String?
  isCreator   Boolean   @default(false)
  currency    Currency  @default(USD)
  birthDate   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  badgeTypesCreated   BadgeType[] @relation("badgeTypesCreated")
  badgeTypesForResell BadgeType[] @relation("badgeTypesForResell")
  badgesOwned         Badge[]
  cryptoWallet        Crypto?
  stripeBalance       Balance?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(uuid())

  phone   String   @unique
  authyId String   @unique
  profile Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Category {
  Art
  Music
  Photo
  Misc
  Podcast
  Animals
  Style
}

model BadgeType {
  id               String  @id @default(uuid())
  creator          Profile @relation(name: "badgeTypesCreated", fields: [creatorProfileId], references: [id])
  creatorProfileId String

  resaller          Profile? @relation(name: "badgeTypesForResell", fields: [resallerProfileId], references: [id])
  resallerProfileId String?

  tokenTypeBlockhainId String @unique
  uri                  String @unique

  supply   Int
  price    Int
  currency Currency @default(USD) // could be user's default currency aswell
  sold     Int      @default(0)

  image     String
  imageHash String

  causeId        Int?
  cause          Cause? @relation(fields: [causeId], references: [id])
  donationAmount Int?   @default(0)

  title       String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  category    Category @default(Art)

  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  forSale             Boolean @default(false)
  soldout             Boolean @default(false)
  resale              Boolean @default(false)
  removedFromShowcase Boolean @default(false)
  gif                 Boolean @default(false)
  badges              Badge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Badge {
  tokenId String @id

  badgeType BadgeType @relation(fields: [saleId], references: [id])
  saleId    String    @unique

  creator          Profile @relation(fields: [creatorProfileId], references: [id])
  creatorProfileId String

  edition      Int
  purchaseDate DateTime

  views  Int @default(0)
  likes  Int @default(0)
  shares Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cause {
  id                  Int         @id @default(autoincrement())
  balanceEur          Int         @default(0)
  balanceGpb          Int         @default(0)
  balanceUsd          Int         @default(0)
  contributionsAmount Int         @default(0)
  image               String
  name                String
  site                String
  badges              BadgeType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Crypto {
  id                  Int     @id @default(autoincrement())
  owner               Profile @relation(fields: [ownerProfileId], references: [id])
  ownerProfileId      String  @unique
  address             String
  encryptedMnemonic   String
  encrytpedPrivateKey String
  ivMnemonic          String
  ivPrivateKey        String
  passwordHint        String
  publicKey           String
}

model Balance {
  id             Int     @id @default(autoincrement())
  owner          Profile @relation(fields: [ownerProfileId], references: [id])
  ownerProfileId String  @unique
  eur            Int
  gbp            Int
  usd            Int
}

model CurrencyRate {
  code String @id
  rate Int
}
