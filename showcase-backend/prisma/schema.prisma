// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  // output             = "../src/prisma/generated/type-graphql"
  // emitTranspiledCode = false
}

enum Currency {
  USD
  EUR
  GBP
}

model SmsVerification {
  phone                     String   @id
  user                      User?
  code                      String
  codesSent                 Int
  codesSentSinceValid       Int
  attemptsEntered           Int
  attemptsEnteredSinceValid Int
  valid                     Boolean
  expiration                DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id String @id @default(uuid())

  authId  String
  phone   String   @unique
  profile Profile?

  isCreator   Boolean @default(false)
  kycVerified Boolean @default(false)
  isBanned    Boolean @default(false)

  smsVerification SmsVerification @relation(fields: [phone], references: [phone])

  badgeTypesCreated   BadgeType[] @relation("badgeTypesCreated")
  badgeTypesForResell BadgeType[] @relation("badgeTypesForResell")

  badgeItemsOwned          BadgeItem[] @relation("badgeCurrentlyOwned")
  badgeItemsOriginatedFrom BadgeItem[] @relation("badgeOriginatedFrom")

  cryptoWallet  Crypto?
  stripeBalance Balance?
  stripeInfo    Stripe?

  buyReceipts  Receipt[] @relation("buyReceipts")
  sellReceipts Receipt[] @relation("sellReceipts")

  badgeItemLikes BadgeItemLike[]
  badgeTypeLikes BadgeTypeLike[]

  badgeItemViews BadgeItemView[]
  badgeTypeViews BadgeTypeView[]
  friends        Follow[]        @relation("friends")
  followers      Follow[]        @relation("followers")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// todo: is it neccesary to have separete id here? ðŸ‘‰ create profile with user.id
model Profile {
  id   String @id
  user User   @relation(fields: [id], references: [id])

  displayName String
  username    String  @unique
  bio         String?
  email       String? @unique

  currency  Currency  @default(USD)
  birthDate DateTime?
  avatar    String?



  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Category {
  Art
  Music
  Photo
  Misc
  Podcast
  Animals
  Style
}

model BadgeType {
  id        String @id
  creator   User   @relation(name: "badgeTypesCreated", fields: [creatorId], references: [id])
  creatorId String

  resaller   User?   @relation(name: "badgeTypesForResell", fields: [resallerId], references: [id])
  resallerId String?

  tokenTypeBlockhainId String // todo: should this be unique? incase of resell it would be violated
  uri                  String // todo: should this be unique? incase of resell it would be violated

  supply   Int
  price    Float
  currency Currency @default(USD)
  sold     Int      @default(0)

  image     String
  imageHash String

  causeId        Int?
  cause          Cause? @relation(fields: [causeId], references: [id])
  donationAmount Float? @default(0)

  title       String   @db.VarChar(50) // todo: should we really limit this field?
  description String?  @db.VarChar(240)
  category    Category @default(Art)

  shares Int @default(0)

  soldout             Boolean     @default(false)
  resale              Boolean     @default(false)
  removedFromShowcase Boolean     @default(false) //todo: set this to true when all badgeItems all badges get removed
  gif                 Boolean     @default(false)
  badgeItems          BadgeItem[]
  receipts            Receipt[]

  likes BadgeTypeLike[]
  views BadgeTypeView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BadgeItem {
  id String @id

  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])
  badgeTypeId String

  creator          User   @relation(name: "badgeOriginatedFrom", fields: [creatorProfileId], references: [id])
  creatorProfileId String

  owner          User   @relation(name: "badgeCurrentlyOwned", fields: [ownerProfileId], references: [id])
  ownerProfileId String

  receipt Receipt?

  edition      Int
  purchaseDate DateTime

  shares Int @default(0)

  removedFromShowcase Boolean @default(false)
  forSale             Boolean @default(false)

  likes BadgeItemLike[]
  views BadgeItemView[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cause {
  id                    Int         @id @default(autoincrement())
  balanceEur            Float       @default(0)
  balanceGpb            Float       @default(0)
  balanceUsd            Float       @default(0)
  numberOfContributions Float       @default(0)
  image                 String
  name                  String
  site                  String
  badgeTypes            BadgeType[]
  receipts              Receipt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Crypto {
  id                  String @id
  owner               User   @relation(fields: [id], references: [id])
  address             String
  encryptedMnemonic   String
  encrytpedPrivateKey String
  ivMnemonic          String
  ivPrivateKey        String
  passwordHint        String
  publicKey           String
}

model Balance {
  id    String @id
  owner User   @relation(fields: [id], references: [id])

  eur                          Float
  gbp                          Float
  usd                          Float
  totalSpentAmountConvertedUsd Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CurrencyRate {
  code String @id
  rate Float
}

model Receipt {
  id Int @id @default(autoincrement())

  recipient   User   @relation(name: "buyReceipts", fields: [recipientId], references: [id])
  recipientId String

  creator   User   @relation(name: "sellReceipts", fields: [creatorId], references: [id])
  creatorId String

  badgeItem   BadgeItem @relation(fields: [badgeItemId], references: [id])
  badgeItemId String

  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])
  badgeTypeId String

  stripeChargeId String

  salePrice          Float
  saleDonationAmount Float?
  saleCurrency       Currency

  convertedPrice    Float
  convertedRate     Float
  convertedCurrency Currency

  cause   Cause? @relation(fields: [causeId], references: [id])
  causeId Int?

  transactionHash String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Stripe {
  id    String @id
  owner User   @relation(fields: [id], references: [id])

  stripeId          String @unique // todo: should stripeId be unique here? 
  lastFourCardDigit Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BadgeItemLike {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeItemId String
  badgeItem   BadgeItem @relation(fields: [badgeItemId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeItemId])
}

// todo: maybe like tables can be merged together
model BadgeTypeLike {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeTypeId String
  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeTypeId])
}

model BadgeItemView {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeItemId String
  badgeItem   BadgeItem @relation(fields: [badgeItemId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeItemId])
}

model BadgeTypeView {
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  badgeTypeId String
  badgeType   BadgeType @relation(fields: [badgeTypeId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, badgeTypeId])
}

// todo: are these statuses enough?
enum FollowStatus {
  Pending
  Accepted
  Declined
  Unfollowed
}

model Follow {
  userId         String
  profile        User         @relation(name: "followers", fields: [userId], references: [id])
  followerId String
  follower       User         @relation(name: "friends", fields: [followerId], references: [id])
  status         FollowStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@id([userId, followerId])
}
